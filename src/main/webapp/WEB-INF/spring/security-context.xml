<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="customAccessDenied" class="com.dohyeong.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="com.dohyeong.security.CustomLoginSuccessHandler"></bean>
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<bean id="customUserDetailsService" class="com.dohyeong.security.CustomUserDetailsService"></bean>
	
	<!-- role별로 접근할 수 있는 리소스를 정의하는 작업 -->
	<security:http pattern="/member/loginForm" security="none"/>
	<security:http pattern="/member/idCheck" security="none"/>
	<security:http pattern="/member/joinProcess" security="none"/>
	<!--<security:http pattern="/**/*.js" security="none"/>
	<security:http pattern="/**/*.css" security="none"/>  -->
	
	<security:http pattern="/board/uploadForm" security="none"/>
	<security:http pattern="/board/uploadFormAction" security="none"/>
	<security:http pattern="/board/uploadAjaxAction" security="none"/>
	<!-- <security:http auto-config="true" use-expressions="true"> -->
	<security:http>
	
		<security:intercept-url pattern="/member/all" access="permitAll"/>
		<!-- /sample/memeber라는 URI는 ROLE_MEMEBER라는 권한이 있는 사용자만 접근할 수 있다. -->
		<security:intercept-url pattern="/member/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/member/admin" access="hasRole('ROLE_ADMIN')"/>
		
		
		<!--security:access-denied-handler는 인터페이스의 구현체를 지정하거나 error-page를 지정할수 있다. -->
		<!-- <security:access-denied-handler error-page="/member/accessError"/> -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- <security:form-login/> -->
		<security:form-login login-page="/member/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- logout 처리 -->
		<!-- <security:logout logout-url="/member/customLogout" invalidate-session="true"/> -->
		
		<!-- 쿠키 기억하기 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		<!-- logout 처리 -->
		<security:logout logout-url="/member/customLogout" invalidate-session="true" delete-cookies="remember-me, JESSION_ID"/>
	
	</security:http>
	
	
	<security:authentication-manager>
		 <!-- <security:authentication-provider>  -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
		
			<!-- <security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_MEMBER"/>
			</security:user-service> -->
			
			<!-- jdbc기존 테이블 사용하기 -->	
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/>
			<security:password-encoder ref="bcryptPasswordEncoder"/> -->
			
			
			<security:password-encoder ref="bcryptPasswordEncoder"/> 
			
			<!-- 쿼리를 이용하는 인증 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="select userid, userpw, enabled from tbl_member where userid=?"
				authorities-by-username-query="select userid, auth from tbl_member_auth where userid=?"/>
			<security:password-encoder ref="bcryptPasswordEncoder"/> -->
			
		</security:authentication-provider>
	</security:authentication-manager>
    
</beans>
